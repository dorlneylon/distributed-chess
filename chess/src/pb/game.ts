// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.1
// source: game.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "game";

export enum Color {
  WHITE = 0,
  BLACK = 1,
  UNRECOGNIZED = -1,
}

export function colorFromJSON(object: any): Color {
  switch (object) {
    case 0:
    case "WHITE":
      return Color.WHITE;
    case 1:
    case "BLACK":
      return Color.BLACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Color.UNRECOGNIZED;
  }
}

export function colorToJSON(object: Color): string {
  switch (object) {
    case Color.WHITE:
      return "WHITE";
    case Color.BLACK:
      return "BLACK";
    case Color.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GameState {
  turn: Color;
  whitePlayer: string;
  blackPlayer: string;
  board: Board | undefined;
}

export interface Piece {
  color: Color;
  kind: string;
}

export interface Location {
  coords: number[];
  piece: Piece | undefined;
}

export interface Board {
  rows: Row[];
}

export interface Row {
  cells: Cell[];
}

export interface Cell {
  piece?: Piece | undefined;
}

function createBaseGameState(): GameState {
  return { turn: 0, whitePlayer: "", blackPlayer: "", board: undefined };
}

export const GameState = {
  encode(message: GameState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.turn !== 0) {
      writer.uint32(8).int32(message.turn);
    }
    if (message.whitePlayer !== "") {
      writer.uint32(18).string(message.whitePlayer);
    }
    if (message.blackPlayer !== "") {
      writer.uint32(26).string(message.blackPlayer);
    }
    if (message.board !== undefined) {
      Board.encode(message.board, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.turn = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.whitePlayer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blackPlayer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.board = Board.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      turn: isSet(object.turn) ? colorFromJSON(object.turn) : 0,
      whitePlayer: isSet(object.whitePlayer) ? globalThis.String(object.whitePlayer) : "",
      blackPlayer: isSet(object.blackPlayer) ? globalThis.String(object.blackPlayer) : "",
      board: isSet(object.board) ? Board.fromJSON(object.board) : undefined,
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.turn !== 0) {
      obj.turn = colorToJSON(message.turn);
    }
    if (message.whitePlayer !== "") {
      obj.whitePlayer = message.whitePlayer;
    }
    if (message.blackPlayer !== "") {
      obj.blackPlayer = message.blackPlayer;
    }
    if (message.board !== undefined) {
      obj.board = Board.toJSON(message.board);
    }
    return obj;
  },

  create(base?: DeepPartial<GameState>): GameState {
    return GameState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GameState>): GameState {
    const message = createBaseGameState();
    message.turn = object.turn ?? 0;
    message.whitePlayer = object.whitePlayer ?? "";
    message.blackPlayer = object.blackPlayer ?? "";
    message.board = (object.board !== undefined && object.board !== null) ? Board.fromPartial(object.board) : undefined;
    return message;
  },
};

function createBasePiece(): Piece {
  return { color: 0, kind: "" };
}

export const Piece = {
  encode(message: Piece, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.color !== 0) {
      writer.uint32(8).int32(message.color);
    }
    if (message.kind !== "") {
      writer.uint32(18).string(message.kind);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Piece {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePiece();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.color = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kind = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Piece {
    return {
      color: isSet(object.color) ? colorFromJSON(object.color) : 0,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
    };
  },

  toJSON(message: Piece): unknown {
    const obj: any = {};
    if (message.color !== 0) {
      obj.color = colorToJSON(message.color);
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    return obj;
  },

  create(base?: DeepPartial<Piece>): Piece {
    return Piece.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Piece>): Piece {
    const message = createBasePiece();
    message.color = object.color ?? 0;
    message.kind = object.kind ?? "";
    return message;
  },
};

function createBaseLocation(): Location {
  return { coords: [], piece: undefined };
}

export const Location = {
  encode(message: Location, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.coords) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.piece !== undefined) {
      Piece.encode(message.piece, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Location {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.coords.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.coords.push(reader.uint32());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.piece = Piece.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      coords: globalThis.Array.isArray(object?.coords) ? object.coords.map((e: any) => globalThis.Number(e)) : [],
      piece: isSet(object.piece) ? Piece.fromJSON(object.piece) : undefined,
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.coords?.length) {
      obj.coords = message.coords.map((e) => Math.round(e));
    }
    if (message.piece !== undefined) {
      obj.piece = Piece.toJSON(message.piece);
    }
    return obj;
  },

  create(base?: DeepPartial<Location>): Location {
    return Location.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Location>): Location {
    const message = createBaseLocation();
    message.coords = object.coords?.map((e) => e) || [];
    message.piece = (object.piece !== undefined && object.piece !== null) ? Piece.fromPartial(object.piece) : undefined;
    return message;
  },
};

function createBaseBoard(): Board {
  return { rows: [] };
}

export const Board = {
  encode(message: Board, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.rows) {
      Row.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Board {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rows.push(Row.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Board {
    return { rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => Row.fromJSON(e)) : [] };
  },

  toJSON(message: Board): unknown {
    const obj: any = {};
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => Row.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Board>): Board {
    return Board.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Board>): Board {
    const message = createBaseBoard();
    message.rows = object.rows?.map((e) => Row.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRow(): Row {
  return { cells: [] };
}

export const Row = {
  encode(message: Row, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cells) {
      Cell.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Row {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cells.push(Cell.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Row {
    return { cells: globalThis.Array.isArray(object?.cells) ? object.cells.map((e: any) => Cell.fromJSON(e)) : [] };
  },

  toJSON(message: Row): unknown {
    const obj: any = {};
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => Cell.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Row>): Row {
    return Row.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Row>): Row {
    const message = createBaseRow();
    message.cells = object.cells?.map((e) => Cell.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCell(): Cell {
  return { piece: undefined };
}

export const Cell = {
  encode(message: Cell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.piece !== undefined) {
      Piece.encode(message.piece, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Cell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.piece = Piece.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cell {
    return { piece: isSet(object.piece) ? Piece.fromJSON(object.piece) : undefined };
  },

  toJSON(message: Cell): unknown {
    const obj: any = {};
    if (message.piece !== undefined) {
      obj.piece = Piece.toJSON(message.piece);
    }
    return obj;
  },

  create(base?: DeepPartial<Cell>): Cell {
    return Cell.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Cell>): Cell {
    const message = createBaseCell();
    message.piece = (object.piece !== undefined && object.piece !== null) ? Piece.fromPartial(object.piece) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
