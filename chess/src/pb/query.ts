// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.1
// source: query.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import { GameState } from "./game";

export const protobufPackage = "query";

export interface StateRequest {
  whitePlayer: string;
  blackPlayer: string;
}

export interface StateResponse {
  state: GameState | undefined;
}

export interface StartRequest {
  whitePlayer: string;
  blackPlayer: string;
}

export interface StartResponse {
  state: GameState | undefined;
}

export interface Transaction {
  whitePlayer: string;
  blackPlayer: string;
  action: Position[];
}

export interface Position {
  x: number;
  y: number;
}

export interface TransactionResponse {
  ok: boolean;
}

export interface IsInGameRequest {
  player: string;
}

export interface IsInGameResponse {
  state?: GameState | undefined;
}

function createBaseStateRequest(): StateRequest {
  return { whitePlayer: "", blackPlayer: "" };
}

export const StateRequest = {
  encode(message: StateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.whitePlayer !== "") {
      writer.uint32(10).string(message.whitePlayer);
    }
    if (message.blackPlayer !== "") {
      writer.uint32(18).string(message.blackPlayer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.whitePlayer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blackPlayer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateRequest {
    return {
      whitePlayer: isSet(object.whitePlayer) ? globalThis.String(object.whitePlayer) : "",
      blackPlayer: isSet(object.blackPlayer) ? globalThis.String(object.blackPlayer) : "",
    };
  },

  toJSON(message: StateRequest): unknown {
    const obj: any = {};
    if (message.whitePlayer !== "") {
      obj.whitePlayer = message.whitePlayer;
    }
    if (message.blackPlayer !== "") {
      obj.blackPlayer = message.blackPlayer;
    }
    return obj;
  },

  create(base?: DeepPartial<StateRequest>): StateRequest {
    return StateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateRequest>): StateRequest {
    const message = createBaseStateRequest();
    message.whitePlayer = object.whitePlayer ?? "";
    message.blackPlayer = object.blackPlayer ?? "";
    return message;
  },
};

function createBaseStateResponse(): StateResponse {
  return { state: undefined };
}

export const StateResponse = {
  encode(message: StateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== undefined) {
      GameState.encode(message.state, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = GameState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateResponse {
    return { state: isSet(object.state) ? GameState.fromJSON(object.state) : undefined };
  },

  toJSON(message: StateResponse): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = GameState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<StateResponse>): StateResponse {
    return StateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateResponse>): StateResponse {
    const message = createBaseStateResponse();
    message.state = (object.state !== undefined && object.state !== null)
      ? GameState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseStartRequest(): StartRequest {
  return { whitePlayer: "", blackPlayer: "" };
}

export const StartRequest = {
  encode(message: StartRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.whitePlayer !== "") {
      writer.uint32(10).string(message.whitePlayer);
    }
    if (message.blackPlayer !== "") {
      writer.uint32(18).string(message.blackPlayer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StartRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.whitePlayer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blackPlayer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartRequest {
    return {
      whitePlayer: isSet(object.whitePlayer) ? globalThis.String(object.whitePlayer) : "",
      blackPlayer: isSet(object.blackPlayer) ? globalThis.String(object.blackPlayer) : "",
    };
  },

  toJSON(message: StartRequest): unknown {
    const obj: any = {};
    if (message.whitePlayer !== "") {
      obj.whitePlayer = message.whitePlayer;
    }
    if (message.blackPlayer !== "") {
      obj.blackPlayer = message.blackPlayer;
    }
    return obj;
  },

  create(base?: DeepPartial<StartRequest>): StartRequest {
    return StartRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartRequest>): StartRequest {
    const message = createBaseStartRequest();
    message.whitePlayer = object.whitePlayer ?? "";
    message.blackPlayer = object.blackPlayer ?? "";
    return message;
  },
};

function createBaseStartResponse(): StartResponse {
  return { state: undefined };
}

export const StartResponse = {
  encode(message: StartResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== undefined) {
      GameState.encode(message.state, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StartResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = GameState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartResponse {
    return { state: isSet(object.state) ? GameState.fromJSON(object.state) : undefined };
  },

  toJSON(message: StartResponse): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = GameState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<StartResponse>): StartResponse {
    return StartResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartResponse>): StartResponse {
    const message = createBaseStartResponse();
    message.state = (object.state !== undefined && object.state !== null)
      ? GameState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { whitePlayer: "", blackPlayer: "", action: [] };
}

export const Transaction = {
  encode(message: Transaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.whitePlayer !== "") {
      writer.uint32(10).string(message.whitePlayer);
    }
    if (message.blackPlayer !== "") {
      writer.uint32(18).string(message.blackPlayer);
    }
    for (const v of message.action) {
      Position.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.whitePlayer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blackPlayer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.action.push(Position.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      whitePlayer: isSet(object.whitePlayer) ? globalThis.String(object.whitePlayer) : "",
      blackPlayer: isSet(object.blackPlayer) ? globalThis.String(object.blackPlayer) : "",
      action: globalThis.Array.isArray(object?.action) ? object.action.map((e: any) => Position.fromJSON(e)) : [],
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.whitePlayer !== "") {
      obj.whitePlayer = message.whitePlayer;
    }
    if (message.blackPlayer !== "") {
      obj.blackPlayer = message.blackPlayer;
    }
    if (message.action?.length) {
      obj.action = message.action.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Transaction>): Transaction {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transaction>): Transaction {
    const message = createBaseTransaction();
    message.whitePlayer = object.whitePlayer ?? "";
    message.blackPlayer = object.blackPlayer ?? "";
    message.action = object.action?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBasePosition(): Position {
  return { x: 0, y: 0 };
}

export const Position = {
  encode(message: Position, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Position {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create(base?: DeepPartial<Position>): Position {
    return Position.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Position>): Position {
    const message = createBasePosition();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseTransactionResponse(): TransactionResponse {
  return { ok: false };
}

export const TransactionResponse = {
  encode(message: TransactionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionResponse {
    return { ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false };
  },

  toJSON(message: TransactionResponse): unknown {
    const obj: any = {};
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    return obj;
  },

  create(base?: DeepPartial<TransactionResponse>): TransactionResponse {
    return TransactionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransactionResponse>): TransactionResponse {
    const message = createBaseTransactionResponse();
    message.ok = object.ok ?? false;
    return message;
  },
};

function createBaseIsInGameRequest(): IsInGameRequest {
  return { player: "" };
}

export const IsInGameRequest = {
  encode(message: IsInGameRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== "") {
      writer.uint32(10).string(message.player);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsInGameRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInGameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.player = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInGameRequest {
    return { player: isSet(object.player) ? globalThis.String(object.player) : "" };
  },

  toJSON(message: IsInGameRequest): unknown {
    const obj: any = {};
    if (message.player !== "") {
      obj.player = message.player;
    }
    return obj;
  },

  create(base?: DeepPartial<IsInGameRequest>): IsInGameRequest {
    return IsInGameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInGameRequest>): IsInGameRequest {
    const message = createBaseIsInGameRequest();
    message.player = object.player ?? "";
    return message;
  },
};

function createBaseIsInGameResponse(): IsInGameResponse {
  return { state: undefined };
}

export const IsInGameResponse = {
  encode(message: IsInGameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== undefined) {
      GameState.encode(message.state, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsInGameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = GameState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInGameResponse {
    return { state: isSet(object.state) ? GameState.fromJSON(object.state) : undefined };
  },

  toJSON(message: IsInGameResponse): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = GameState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<IsInGameResponse>): IsInGameResponse {
    return IsInGameResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInGameResponse>): IsInGameResponse {
    const message = createBaseIsInGameResponse();
    message.state = (object.state !== undefined && object.state !== null)
      ? GameState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

export type NodeDefinition = typeof NodeDefinition;
export const NodeDefinition = {
  name: "Node",
  fullName: "query.Node",
  methods: {
    state: {
      name: "State",
      requestType: StateRequest,
      requestStream: false,
      responseType: StateResponse,
      responseStream: false,
      options: {},
    },
    start: {
      name: "Start",
      requestType: StartRequest,
      requestStream: false,
      responseType: StartResponse,
      responseStream: false,
      options: {},
    },
    transact: {
      name: "Transact",
      requestType: Transaction,
      requestStream: false,
      responseType: TransactionResponse,
      responseStream: false,
      options: {},
    },
    isInGame: {
      name: "IsInGame",
      requestType: IsInGameRequest,
      requestStream: false,
      responseType: IsInGameResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface NodeServiceImplementation<CallContextExt = {}> {
  state(request: StateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<StateResponse>>;
  start(request: StartRequest, context: CallContext & CallContextExt): Promise<DeepPartial<StartResponse>>;
  transact(request: Transaction, context: CallContext & CallContextExt): Promise<DeepPartial<TransactionResponse>>;
  isInGame(request: IsInGameRequest, context: CallContext & CallContextExt): Promise<DeepPartial<IsInGameResponse>>;
}

export interface NodeClient<CallOptionsExt = {}> {
  state(request: DeepPartial<StateRequest>, options?: CallOptions & CallOptionsExt): Promise<StateResponse>;
  start(request: DeepPartial<StartRequest>, options?: CallOptions & CallOptionsExt): Promise<StartResponse>;
  transact(request: DeepPartial<Transaction>, options?: CallOptions & CallOptionsExt): Promise<TransactionResponse>;
  isInGame(request: DeepPartial<IsInGameRequest>, options?: CallOptions & CallOptionsExt): Promise<IsInGameResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
